{"version":3,"sources":["Clock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["tokenMap","buildTokenMap","chance","Chance","Clock","props","useState","fact","setFact","useEffect","hours12","hours","facts","minutes","length","weighted","map","f","description","relevance","toString","padStart","App","setMinutes","setHours","interval","setInterval","nowDateTime","Date","getHours","getMinutes","clearInterval","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAIMA,EAAWC,0BACXC,EAAS,IAAIC,SAkCJC,EAhCD,SAACC,GAA+C,IAAD,EACnCC,mBAAS,IAD0B,mBACpDC,EADoD,KAC9CC,EAD8C,KAG3DC,qBAAU,WACR,IAAMC,EAA0B,IAAhBL,EAAMM,MAAc,GAAKN,EAAMM,MAAQ,GACjDC,EAAQZ,EAAmB,IAAVU,EAAgBL,EAAMQ,SACxB,IAAjBD,EAAME,OAKVN,EACEN,EAAOa,SACLH,EAAMI,KAAI,SAACC,GAAD,OAAOA,EAAEC,eACnBN,EAAMI,KAAI,SAACC,GAAD,OAAOA,EAAEE,eAPrBX,EAAQ,MAUT,CAACH,EAAMM,MAAON,EAAMQ,UAEvB,IAAMH,EAA0B,IAAhBL,EAAMM,MAAc,GAAKN,EAAMM,MAAQ,GACvD,OACE,gCACE,8BACE,iCACGD,EADH,IACaL,EAAMQ,QAAQO,WAAWC,SAAS,EAAG,UAGpD,8BAAMd,QCTGe,MArBf,WAAgB,IAAD,EACiBhB,mBAAS,GAD1B,mBACNO,EADM,KACGU,EADH,OAEajB,mBAAS,GAFtB,mBAENK,EAFM,KAECa,EAFD,KAcb,OAVAf,qBAAU,WACR,IAAMgB,EAAWC,aAAY,WAC3B,IAAMC,EAAc,IAAIC,KACxBJ,EAASG,EAAYE,YACrBN,EAAWI,EAAYG,gBACtB,KAEH,OAAO,WAAOC,cAAcN,MAC3B,IAGD,qBAAKO,UAAU,MAAf,SACE,cAAC,EAAD,CAAOrB,MAAOA,EAAOE,QAASA,OCNrBoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.451d5383.chunk.js","sourcesContent":["import { buildTokenMap } from '@grandpoohbear/number-token-map-generator';\nimport { useEffect, useState } from 'react';\nimport { Chance } from 'chance';\n\nconst tokenMap = buildTokenMap();\nconst chance = new Chance();\n\nconst Clock = (props: { hours: number; minutes: number }) => {\n  const [fact, setFact] = useState('');\n\n  useEffect(() => {\n    const hours12 = props.hours === 0 ? 12 : props.hours % 12;\n    const facts = tokenMap[hours12 * 100 + props.minutes];\n    if (facts.length === 0) {\n      setFact('');\n      return;\n    }\n\n    setFact(\n      chance.weighted(\n        facts.map((f) => f.description),\n        facts.map((f) => f.relevance)\n      )\n    );\n  }, [props.hours, props.minutes]);\n\n  const hours12 = props.hours === 0 ? 12 : props.hours % 12;\n  return (\n    <div>\n      <div>\n        <span>\n          {hours12}:{props.minutes.toString().padStart(2, '0')}\n        </span>\n      </div>\n      <div>{fact}</div>\n    </div>\n  );\n};\n\nexport default Clock;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Clock from './Clock';\n\nfunction App() {\n  const [minutes, setMinutes] = useState(0)\n  const [hours, setHours] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const nowDateTime = new Date()\n      setHours(nowDateTime.getHours())\n      setMinutes(nowDateTime.getMinutes())\n    }, 100)\n\n    return () => {clearInterval(interval)}\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Clock hours={hours} minutes={minutes}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}