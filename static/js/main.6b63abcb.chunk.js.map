{"version":3,"sources":["Clock/ClockModel.ts","Clock/ClockFace.tsx","Clock/ClockFeedback.tsx","Clock/Clock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["chance","Chance","ClockModel","is24","currentTime","dayjs","allFacts","currentFactIndex","tokenMap","buildTokenMap","toggle24","updateToTime","time","updateToCurrentTime","updateAllFacts","timeString","hoursString","minutesString","Number","this","makeAutoObservable","reaction","amPmString","weighted","Array","length","keys","map","f","relevance","format","description","observer","model","currentFact","onClick","ClockFeedback","openFeedbackForm","useCallback","debugInfo","JSON","stringify","formUrl","encodeURIComponent","window","open","useState","clockModel","useEffect","interval","setInterval","clearInterval","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAMMA,EAAS,I,MAAIC,QAENC,EAAb,WAOE,aAAe,IAAD,gCANdC,MAAO,EAMO,KALdC,YAAcC,cAKA,KAJdC,SAAoB,GAIN,KAHdC,iBAAmB,EAGL,KAFdC,SAAWC,0BAEG,KA4BdC,SAAW,WACT,EAAKP,MAAQ,EAAKA,MA7BN,KAgCdQ,aAAe,SAACC,GACd,EAAKR,YAAcQ,GAjCP,KAoCdC,oBAAsB,WACpB,EAAKF,aAAaN,gBArCN,KAwCdS,eAAiB,WACf,IAAMC,EAAU,UAAM,EAAKC,aAAX,OAAyB,EAAKC,eAC9C,EAAKX,SAAW,EAAKE,SAASU,OAAOH,KAzCrCI,KAAKN,sBACLM,KAAKL,iBAELM,YAAmBD,MAEnBE,aACE,2BAAS,EAAKL,aAAd,OAA4B,EAAKC,eAAjC,OAAiD,EAAKK,eACtD,WACE,EAAKR,oBAhBb,0DA2DIK,KAAKZ,iBAAmBP,EAAOuB,SAAP,YAClBC,MAAML,KAAKb,SAASmB,QAAQC,QAChCP,KAAKb,SAASqB,KAAI,SAACC,GAAD,OAAOA,EAAEC,gBA7DjC,kCAsBI,OAAOV,KAAKhB,KACRgB,KAAKf,YAAY0B,OAAO,KACxBX,KAAKf,YAAY0B,OAAO,OAxBhC,oCA4BI,OAAOX,KAAKf,YAAY0B,OAAO,QA5BnC,iCAgCI,OAAOX,KAAKhB,KAAOgB,KAAKf,YAAY0B,OAAO,KAAO,KAhCtD,kCAqDI,OAAOX,KAAKb,SAASmB,OAAS,EAC1BN,KAAKb,SAASa,KAAKZ,kBAAkBwB,YACrC,OAvDR,K,QCmBeC,eAnBoB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpC,OACE,gCACE,gCACE,+BAAOA,EAAMjB,cACb,qCACA,+BAAOiB,EAAMhB,gBAHf,OAKE,+BAAOgB,EAAMX,gBAEf,gCACE,8BAAMW,EAAMC,cACZ,8BACE,wBAAQC,QAASF,EAAMvB,SAAvB,qCCdG0B,EAAiC,SAAC,GAAe,IAAbH,EAAY,EAAZA,MACzCI,EAAmBC,uBAAY,WACnC,IAAMC,EAAS,wBAAoBN,EAAMjB,YAA1B,YACbiB,EAAMhB,cADO,YAEXgB,EAAMX,WAFK,2BAGHW,EAAMC,YAHH,wBAINM,KAAKC,UAAUR,EAAM3B,WAExBoC,EAAO,+HAA2HC,mBACtIJ,IAGFK,OAAOC,KAAKH,EAAS,YACpB,CAACT,IAEJ,OACE,8BACE,wBAAQE,QAAS,kBAAME,KAAvB,0BCMSL,eAtBD,WAAO,IAAD,EACGc,mBAAS,IAAI5C,GAA3B6C,EADW,oBAalB,OAVAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BH,EAAWlC,wBACV,KAEH,OAAO,WACLsC,cAAcF,OAKhB,gCACE,cAAC,EAAD,CAAWhB,MAAOc,IAElB,cAAC,EAAD,CAAed,MAAOc,UCbbK,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6b63abcb.chunk.js","sourcesContent":["import { Token } from '@grandpoohbear/number-token-map-generator/dist/models';\nimport { buildTokenMap } from '@grandpoohbear/number-token-map-generator';\nimport { makeAutoObservable, reaction } from 'mobx';\nimport dayjs from 'dayjs';\nimport { Chance } from 'chance';\n\nconst chance = new Chance();\n\nexport class ClockModel {\n  is24 = false;\n  currentTime = dayjs();\n  allFacts: Token[] = [];\n  currentFactIndex = 0;\n  tokenMap = buildTokenMap();\n\n  constructor() {\n    this.updateToCurrentTime();\n    this.updateAllFacts();\n\n    makeAutoObservable(this);\n\n    reaction(\n      () => `${this.hoursString}${this.minutesString}${this.amPmString}`,\n      () => {\n        this.updateAllFacts();\n      }\n    );\n  }\n\n  get hoursString() {\n    return this.is24\n      ? this.currentTime.format('H')\n      : this.currentTime.format('h');\n  }\n\n  get minutesString() {\n    return this.currentTime.format('mm');\n  }\n\n  get amPmString() {\n    return this.is24 ? this.currentTime.format('A') : '';\n  }\n\n  toggle24 = () => {\n    this.is24 = !this.is24;\n  };\n\n  updateToTime = (time: dayjs.Dayjs) => {\n    this.currentTime = time;\n  };\n\n  updateToCurrentTime = () => {\n    this.updateToTime(dayjs());\n  };\n\n  updateAllFacts = () => {\n    const timeString = `${this.hoursString}${this.minutesString}`;\n    this.allFacts = this.tokenMap[Number(timeString)];\n  };\n\n  get currentFact() {\n    return this.allFacts.length > 0\n      ? this.allFacts[this.currentFactIndex].description\n      : '';\n  }\n\n  pickNewFact() {\n    this.currentFactIndex = chance.weighted(\n      [...Array(this.allFacts.length).keys()],\n      this.allFacts.map((f) => f.relevance)\n    );\n  }\n}\n","import React from 'react';\nimport { ClockModel } from './ClockModel';\nimport { observer } from 'mobx-react-lite';\n\ntype Props = {\n  model: ClockModel;\n};\n\nconst ClockFace: React.FC<Props> = ({ model }) => {\n  return (\n    <div>\n      <div>\n        <span>{model.hoursString}</span>\n        <span>:</span>\n        <span>{model.minutesString}</span>\n        &nbsp;\n        <span>{model.amPmString}</span>\n      </div>\n      <div>\n        <div>{model.currentFact}</div>\n        <div>\n          <button onClick={model.toggle24}>Switch 12/24</button>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default observer(ClockFace);\n","import React, { useCallback } from 'react';\nimport { ClockModel } from './ClockModel';\n\ntype Props = {\n  model: ClockModel;\n};\n\nexport const ClockFeedback: React.FC<Props> = ({ model }) => {\n  const openFeedbackForm = useCallback(() => {\n    const debugInfo = `Current time: ${model.hoursString}:${\n      model.minutesString\n    } ${model.amPmString}\nCurrent fact: ${model.currentFact}\nAll facts: ${JSON.stringify(model.allFacts)}`;\n\n    const formUrl = `https://docs.google.com/forms/d/e/1FAIpQLSd1uyqr0WiJEYWWM6fms08flck01NEi0JQP1S3yGf7NdBDi1Q/viewform?entry.1823470529=${encodeURIComponent(\n      debugInfo\n    )}`;\n\n    window.open(formUrl, '_blank');\n  }, [model]);\n\n  return (\n    <div>\n      <button onClick={() => openFeedbackForm()}>Feedback?</button>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport React from 'react';\nimport { ClockModel } from './ClockModel';\nimport ClockFace from './ClockFace';\nimport { ClockFeedback } from './ClockFeedback';\nimport { observer } from 'mobx-react-lite';\n\nconst Clock = () => {\n  const [clockModel] = useState(new ClockModel());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      clockModel.updateToCurrentTime();\n    }, 100);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  return (\n    <div>\n      <ClockFace model={clockModel} />\n\n      <ClockFeedback model={clockModel} />\n    </div>\n  );\n};\n\nexport default observer(Clock);\n","import React from 'react';\nimport './App.css';\nimport Clock from './Clock/Clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}