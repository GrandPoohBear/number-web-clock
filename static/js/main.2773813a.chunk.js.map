{"version":3,"sources":["Clock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["tokenMap","buildTokenMap","chance","Chance","Clock","useState","is24","set24","minutesString","setMinuteString","hoursString","setHourString","amPmString","setAmPmString","allFacts","setAllFacts","fact","setFact","useEffect","interval","setInterval","now","dayjs","format","clearInterval","timeString","facts","Number","console","log","length","weighted","map","f","description","relevance","onClick","body","JSON","stringify","window","location","href","encodeURIComponent","sendFeedbackEmail","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAMMA,EAAWC,0BACXC,EAAS,IAAIC,SAuFJC,EArFD,WAAO,IAAD,EACIC,oBAAS,GADb,mBACXC,EADW,KACLC,EADK,OAEuBF,mBAAS,IAFhC,mBAEXG,EAFW,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGXK,EAHW,KAGEC,EAHF,OAIkBN,mBAAS,IAJ3B,mBAIXO,EAJW,KAICC,EAJD,OAKcR,mBAAkB,IALhC,mBAKXS,EALW,KAKDC,EALC,OAMMV,mBAAS,IANf,mBAMXW,EANW,KAMLC,EANK,KAQlBC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3B,IAAMC,EAAMC,cAERhB,GACFK,EAAcU,EAAIE,OAAO,MACzBd,EAAgBY,EAAIE,OAAO,OAC3BV,EAAc,MAEdF,EAAcU,EAAIE,OAAO,MACzBd,EAAgBY,EAAIE,OAAO,OAC3BV,EAAcQ,EAAIE,OAAO,SAE1B,KAEH,OAAO,WACLC,cAAcL,MAEf,CAACb,IAEJY,qBAAU,WACR,IAAMO,EAAU,UAAMf,GAAN,OAAoBF,GAC9BkB,EAAQ1B,EAAS2B,OAAOF,IAC9BG,QAAQC,IAAR,gCAAqCJ,GAAcC,GACnDX,EAAYW,GAES,IAAjBA,EAAMI,OAKVb,EACEf,EAAO6B,SACLL,EAAMM,KAAI,SAACC,GAAD,OAAOA,EAAEC,eACnBR,EAAMM,KAAI,SAACC,GAAD,OAAOA,EAAEE,eAPrBlB,EAAQ,MAUT,CAACP,EAAaF,EAAeF,IAoBhC,OACE,gCACE,gCACE,+BAAOI,IACP,qCACA,+BAAOF,IAHT,OAKE,+BAAOI,OAET,8BAAMI,IACN,8BACE,wBAAQoB,QAAS,kBAAM7B,GAAOD,IAA9B,4BAEF,8BACE,wBAAQ8B,QAAS,kBAhCG,WACxB,IACMC,EAAI,sKAME3B,EANF,YAMiBF,EANjB,YAMkCI,EANlC,2BAOEI,EAPF,wBAQDsB,KAAKC,UAAUzB,IAGxB0B,OAAOC,SAASC,KAAhB,iBAFkB,oBAElB,oBAAsDC,mBAZtC,6BAYhB,iBAEUA,mBAAmBN,IAiBFO,IAAvB,6BC5EOC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2773813a.chunk.js","sourcesContent":["import { buildTokenMap } from '@grandpoohbear/number-token-map-generator';\nimport { useEffect, useState } from 'react';\nimport { Chance } from 'chance';\nimport dayjs from 'dayjs';\nimport { Token } from '@grandpoohbear/number-token-map-generator/dist/models';\n\nconst tokenMap = buildTokenMap();\nconst chance = new Chance();\n\nconst Clock = () => {\n  const [is24, set24] = useState(false);\n  const [minutesString, setMinuteString] = useState('');\n  const [hoursString, setHourString] = useState('');\n  const [amPmString, setAmPmString] = useState('');\n  const [allFacts, setAllFacts] = useState<Token[]>([]);\n  const [fact, setFact] = useState('');\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = dayjs();\n\n      if (is24) {\n        setHourString(now.format('H'));\n        setMinuteString(now.format('mm'));\n        setAmPmString('');\n      } else {\n        setHourString(now.format('h'));\n        setMinuteString(now.format('mm'));\n        setAmPmString(now.format('A'));\n      }\n    }, 100);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [is24]);\n\n  useEffect(() => {\n    const timeString = `${hoursString}${minutesString}`;\n    const facts = tokenMap[Number(timeString)];\n    console.log(`Facts for timeString: ${timeString}`, facts);\n    setAllFacts(facts);\n\n    if (facts.length === 0) {\n      setFact('');\n      return;\n    }\n\n    setFact(\n      chance.weighted(\n        facts.map((f) => f.description),\n        facts.map((f) => f.relevance)\n      )\n    );\n  }, [hoursString, minutesString, is24]);\n\n  const sendFeedbackEmail = () => {\n    const subject = 'Number web clock feedback';\n    const body = `Thanks for trying this experiment out!  Any feedback?  Facts wrong?  Missing something cool?  Let me know!\n\n    \n    \n--------\nContext:\nCurrent time: ${hoursString}:${minutesString} ${amPmString}\nCurrent fact: ${fact}\nAll facts: ${JSON.stringify(allFacts)}`;\n    const toAddress = 'andy@tutukain.com';\n\n    window.location.href = `mailto:${toAddress}?subject=${encodeURIComponent(\n      subject\n    )}&body=${encodeURIComponent(body)}`;\n  };\n\n  return (\n    <div>\n      <div>\n        <span>{hoursString}</span>\n        <span>:</span>\n        <span>{minutesString}</span>\n        &nbsp;\n        <span>{amPmString}</span>\n      </div>\n      <div>{fact}</div>\n      <div>\n        <button onClick={() => set24(!is24)}>Switch 12/24</button>\n      </div>\n      <div>\n        <button onClick={() => sendFeedbackEmail()}>Feedback?</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Clock;\n","import React from 'react';\nimport './App.css';\nimport Clock from './Clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}